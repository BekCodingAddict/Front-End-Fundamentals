-------------------------------JAVASCRIPT--------------------------------------------                       
JS Data Types:
   JavaScript Types are Dynamic. This means the same variable can used to hold diffrent data types:
   let x; //Undefined
   x=5; // Number 
   x="John"; // String

JS Numbers:
  All JavaScript numbers are stored as decimal numbers(floating point);
  All JavaScript numbers are stored in a a 64-bit floating-point format.
  JavaScript BigInt is a new datatype (ES2020) that can be used to store integer values that are too big to be represented by a normal JavaScript Number.


JS Exponential Notation:
  Extra large or extra small numbers can be written with scientific (exponential) notation:
  let y = 123e5;    // 12300000
  let z = 123e-5;   // 0.00123

JS Arrays:
  JavaScript arrays are written with square brackets.
  Array items are separated by commas.
  Array indexes are zero-based, which means the first item is [0], second is [1], and so on.

JS Object:
  JavaScript objects are written with curly braces {}.

JS The typeof Operator:
  You can use the JavaScript typeof operator to find the type of a JavaScript variable.
  The typeof operator returns the type of a variable or an expression.

JS Undefined:
  In JavaScript, a variable without a value, has the value undefined. The type is also undefined.

JS Empty Values:
  An empty value has nothing to do with undefined.
  An empty string has both a legal value and a type.

JS Functions:
  A JavaScript function is a block of code designed to perform a particular task.
  A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().
  Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).
  Functions can be used the same way as you use variables, in all types of formulas, assignments, and calculations.

JS Objects:
  Real Life Objects, Properties, and Methods.
  In real life, a car is an object.
  A car has properties like weight and color, and methods like start and stop.
  All cars have the same properties, but the property values differ from car to car.
  All cars have the same methods, but the methods are performed at different times.
  - Comparing two JavaScript objects always returns false.
  
  Objects are variables too. But objects can contain many values.
  It is a common practice to declare objects with the const keyword.
  JavaScript objects are containers for named values called properties.
  Objects can also have methods.
  Methods are actions that can be performed on objects.
  Methods are stored in properties as function definitions.
  Methods:
    A method is a function stored as a property.
  
  WHat is this?:
    In JavaScript, the this keyword refers to an object.
    Which object depends on how this is being invoked (used or called).
    The this keyword refers to different objects depending on how it is used:
      In an object method, this refers to the object.
      Alone, this refers to the global object.
      In a function, this refers to the global object.
      In a function, in strict mode, this is undefined.
      In an event, this refers to the element that received the event.
      Methods like call(), apply(), and bind() can refer this to any object.
  
    this is not a variable. It is a keyword. You cannot change the value of this.
  
  NOTE:
    When a JavaScript variable is declared with the keyword "new", the variable is created as an object.
    Do Not Declare Strings, Numbers, and Booleans as Objects!
    Avoid String, Number, and Boolean objects. They complicate your code and slow down execution speed.
JavaScript Events:
  - HTML Events:
    - An HTML event can be something the browser does, or something a user does.
      Here are some examples of HTML events:
      An HTML web page has finished loading
      An HTML input field was changed
      An HTML button was clicked
      Often, when events happen, you may want to do something.
      JavaScript lets you execute code when events are detected.
      HTML allows event handler attributes, with JavaScript code, to be added to HTML elements.

JavaScript String:
  - JavaScript strings are for storing and manipulating text.
  - A JavaScript string is zero or more characters written inside quotes.
  - You can use quotes inside a string, as long as they don't match the quotes surrounding the string.

JavaScript Breaking Long Code Lines:
  - For best readability, programmers often like to avoid code lines longer than 80 characters.
  - If a JavaScript statement does not fit on one line, 
    the best place to break it is after an operator:
  - You can also break up a code line within a text string with a single backslash:
  - The \ method is not the preferred method. It might not have universal support.
    Some browsers do not allow spaces behind the \ character.
  - A safer way to break up a string, is to use string addition.
  - You cannot break up a code line with a backslash:

JS String Methods:
  - All string methods return a new string.
    They don't modify the original string.
    Formally said:
      Strings are immutable: Strings cannot be changed, only replaced.

  - There are 3 methods for extracting a part of a string:
    - slice(start, end)
      substring(start, end)
      substr(start, length)
      substring() is similar to slice().
      - replace() 
        The replace() method does not change the string it is called on.
        The replace() method returns a new string.
        The replace() method replaces only the first match
        By default, the replace() method is case sensitive.
         Writing Upper-case string will not work:

      replaceAll()- method allows you to specify a regular expression instead of a string to be replaced.
        - Note
          replaceAll() is an ES2021 feature.
          replaceAll() does not work in Internet Explorer.
      toUpperCase()
      toUpperCase()
      concat() joins two or more strings:
        - let text1 = "Hello";
          let text2 = "World";
          let text3 = text1.concat(" ", text2);
      trim()- method removes whitespace from both sides of a string:
      trimStart()- method works like trim(),but removes whitespace only from the start of a string.
      trimEnd()- method works like trim(), but removes whitespace only from the end of a string.
      padStart()- method pads a string from the start.
      split() method:A string can be converted to an array .

  - Extracting String Characters:
    There are 3 methods for extracting string characters:
    charAt(position)
    charCodeAt(position)
    Property access [ ]


The difference is that the second parameter specifies the length of the extracted part.

  - Note
    JavaScript counts positions from zero.
    First position is 0.
    Second position is 1.

  indexOf() method returns the index (position) the first occurrence of a string in a string.
  lastIndexOf() method returns the index of the last occurrence of a specified text in a string.
    - Both indexOf(), and lastIndexOf() return -1 if the text is not found:
      Both methods accept a second parameter as the starting position for the search.
      The lastIndexOf() methods searches backwards (from the end to the beginning), meaning: if the second parameter is 15, the search starts at position 15, 
      and searches to the beginning of the string.
  search() method searches a string for a string (or a regular expression) and returns the position of the match:
    - The two methods, indexOf() and search(), are equal?
      They accept the same arguments (parameters), and return the same value?
      The two methods are NOT equal. These are the differences:
      The search() method cannot take a second start position argument.
      The indexOf() method cannot take powerful search values (regular expressions).
  match() method returns an array containing the results of matching a string against a string (or a regular expression).
  If a regular expression does not include the g modifier (global search), match() will return only the first match in the string.
 
  includes() method returns true if a string contains a specified value.
  startsWith() method returns true if a string begins with a specified value.
  endsWith() method returns true if a string ends with a specified value.

JavaScript Template Literals:
  - Interpolation:
    - Template literals provide an easy way to interpolate variables and expressions into strings.
      The method is called string interpolation.The syntax is:
      ${...}
    - Automatic replacing of expressions with real values is called string interpolation.
    
JavaScript Numbers:
  - JavaScript has only one type of number. Numbers can be written with or without decimals.
  - Extra large or extra small numbers can be written with scientific (exponent) notation:
    - let x = 123e5;    // 12300000
      let y = 123e-5;   // 0.00123
  - JavaScript Numbers are Always 64-bit Floating Point.
  - Integer Precision:
    - Integers (numbers without a period or exponent notation) are accurate up to 15 digits.
    - The maximum number of decimals is 17.
  - Floating Precision:
    - Floating point arithmetic is not always 100% accurate.
  - NaN - Not a Number:
    - NaN is a JavaScript reserved word indicating that a number is not a legal number.
      Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number):
    - NaN is a number: typeof NaN returns number.
  - Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.
    - Division by 0 (zero) also generates Infinity.
      - let x =  2 / 0;
        let y = -2 / 0;
    - Infinity is a number: typeof Infinity returns number.
  - Hexadecimal:
    - JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.
      - let x = 0xFF;
  
  - NOTE:
    - Never write a number with a leading zero (like 07).
      Some JavaScript versions interpret numbers as octal if they are written with a leading zero.
    - By default, JavaScript displays numbers as base 10 decimals.
      But you can use the toString() method to output numbers from base 2 to base 36.
      Hexadecimal is base 16. Decimal is base 10. Octal is base 8. Binary is base 2.
        - let myNumber = 32;
          myNumber.toString(32);
          myNumber.toString(16);
          myNumber.toString(12);
          myNumber.toString(10);
          myNumber.toString(8);
          myNumber.toString(2);
    - Comparing two JavaScript objects always returns false.!