-------------------------------JAVASCRIPT--------------------------------------------                       
JS Data Types:
   JavaScript Types are Dynamic. This means the same variable can used to hold diffrent data types:
   let x; //Undefined
   x=5; // Number 
   x="John"; // String

JS Numbers:
  All JavaScript numbers are stored as decimal numbers(floating point);
  All JavaScript numbers are stored in a a 64-bit floating-point format.
  JavaScript BigInt is a new datatype (ES2020) that can be used to store integer values that are too big to be represented by a normal JavaScript Number.


JS Exponential Notation:
  Extra large or extra small numbers can be written with scientific (exponential) notation:
  let y = 123e5;    // 12300000
  let z = 123e-5;   // 0.00123

JS Arrays:
  JavaScript arrays are written with square brackets.
  Array items are separated by commas.
  Array indexes are zero-based, which means the first item is [0], second is [1], and so on.

JS Object:
  JavaScript objects are written with curly braces {}.

JS The typeof Operator:
  You can use the JavaScript typeof operator to find the type of a JavaScript variable.
  The typeof operator returns the type of a variable or an expression.

JS Undefined:
  In JavaScript, a variable without a value, has the value undefined. The type is also undefined.

JS Empty Values:
  An empty value has nothing to do with undefined.
  An empty string has both a legal value and a type.

JS Functions:
  A JavaScript function is a block of code designed to perform a particular task.
  A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().
  Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).
  Functions can be used the same way as you use variables, in all types of formulas, assignments, and calculations.

JS Objects:
  Real Life Objects, Properties, and Methods.
  In real life, a car is an object.
  A car has properties like weight and color, and methods like start and stop.
  All cars have the same properties, but the property values differ from car to car.
  All cars have the same methods, but the methods are performed at different times.
  - Comparing two JavaScript objects always returns false.
  
  Objects are variables too. But objects can contain many values.
  It is a common practice to declare objects with the const keyword.
  JavaScript objects are containers for named values called properties.
  Objects can also have methods.
  Methods are actions that can be performed on objects.
  Methods are stored in properties as function definitions.
  Methods:
    A method is a function stored as a property.
  
  WHat is this?:
    In JavaScript, the this keyword refers to an object.
    Which object depends on how this is being invoked (used or called).
    The this keyword refers to different objects depending on how it is used:
      In an object method, this refers to the object.
      Alone, this refers to the global object.
      In a function, this refers to the global object.
      In a function, in strict mode, this is undefined.
      In an event, this refers to the element that received the event.
      Methods like call(), apply(), and bind() can refer this to any object.
  
    this is not a variable. It is a keyword. You cannot change the value of this.
  
  NOTE:
    When a JavaScript variable is declared with the keyword "new", the variable is created as an object.
    Do Not Declare Strings, Numbers, and Booleans as Objects!
    Avoid String, Number, and Boolean objects. They complicate your code and slow down execution speed.
JavaScript Events:
  - HTML Events:
    - An HTML event can be something the browser does, or something a user does.
      Here are some examples of HTML events:
      An HTML web page has finished loading
      An HTML input field was changed
      An HTML button was clicked
      Often, when events happen, you may want to do something.
      JavaScript lets you execute code when events are detected.
      HTML allows event handler attributes, with JavaScript code, to be added to HTML elements.

JavaScript String:
  - JavaScript strings are for storing and manipulating text.
  - A JavaScript string is zero or more characters written inside quotes.
  - You can use quotes inside a string, as long as they don't match the quotes surrounding the string.

JavaScript Breaking Long Code Lines:
  - For best readability, programmers often like to avoid code lines longer than 80 characters.
  - If a JavaScript statement does not fit on one line, 
    the best place to break it is after an operator:
  - You can also break up a code line within a text string with a single backslash:
  - The \ method is not the preferred method. It might not have universal support.
    Some browsers do not allow spaces behind the \ character.
  - A safer way to break up a string, is to use string addition.
  - You cannot break up a code line with a backslash:

JS String Methods:
  - All string methods return a new string.
    They don't modify the original string.
    Formally said:
      Strings are immutable: Strings cannot be changed, only replaced.

  - There are 3 methods for extracting a part of a string:
    - slice(start, end)
      substring(start, end)
      substr(start, length)
      substring() is similar to slice().
      - replace() 
        The replace() method does not change the string it is called on.
        The replace() method returns a new string.
        The replace() method replaces only the first match
        By default, the replace() method is case sensitive.
         Writing Upper-case string will not work:

      replaceAll()- method allows you to specify a regular expression instead of a string to be replaced.
        - Note
          replaceAll() is an ES2021 feature.
          replaceAll() does not work in Internet Explorer.
      toUpperCase()
      toUpperCase()
      concat() joins two or more strings:
        - let text1 = "Hello";
          let text2 = "World";
          let text3 = text1.concat(" ", text2);
      trim()- method removes whitespace from both sides of a string:
      trimStart()- method works like trim(),but removes whitespace only from the start of a string.
      trimEnd()- method works like trim(), but removes whitespace only from the end of a string.
      padStart()- method pads a string from the start.
      split() method:A string can be converted to an array .

  - Extracting String Characters:
    There are 3 methods for extracting string characters:
    charAt(position)
    charCodeAt(position)
    Property access [ ]


The difference is that the second parameter specifies the length of the extracted part.

  - Note
    JavaScript counts positions from zero.
    First position is 0.
    Second position is 1.

  indexOf() method returns the index (position) the first occurrence of a string in a string.
  lastIndexOf() method returns the index of the last occurrence of a specified text in a string.
    - Both indexOf(), and lastIndexOf() return -1 if the text is not found:
      Both methods accept a second parameter as the starting position for the search.
      The lastIndexOf() methods searches backwards (from the end to the beginning), meaning: if the second parameter is 15, the search starts at position 15, 
      and searches to the beginning of the string.
  search() method searches a string for a string (or a regular expression) and returns the position of the match:
    - The two methods, indexOf() and search(), are equal?
      They accept the same arguments (parameters), and return the same value?
      The two methods are NOT equal. These are the differences:
      The search() method cannot take a second start position argument.
      The indexOf() method cannot take powerful search values (regular expressions).
  match() method returns an array containing the results of matching a string against a string (or a regular expression).
  If a regular expression does not include the g modifier (global search), match() will return only the first match in the string.
 
  includes() method returns true if a string contains a specified value.
  startsWith() method returns true if a string begins with a specified value.
  endsWith() method returns true if a string ends with a specified value.

JavaScript Template Literals:
  - Interpolation:
    - Template literals provide an easy way to interpolate variables and expressions into strings.
      The method is called string interpolation.The syntax is:
      ${...}
    - Automatic replacing of expressions with real values is called string interpolation.
    
JavaScript Numbers:
  - JavaScript has only one type of number. Numbers can be written with or without decimals.
  - Extra large or extra small numbers can be written with scientific (exponent) notation:
    - let x = 123e5;    // 12300000
      let y = 123e-5;   // 0.00123
  - JavaScript Numbers are Always 64-bit Floating Point.
  - Integer Precision:
    - Integers (numbers without a period or exponent notation) are accurate up to 15 digits.
    - The maximum number of decimals is 17.
  - Floating Precision:
    - Floating point arithmetic is not always 100% accurate.
  - NaN - Not a Number:
    - NaN is a JavaScript reserved word indicating that a number is not a legal number.
      Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number):
    - NaN is a number: typeof NaN returns number.
  - Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.
    - Division by 0 (zero) also generates Infinity.
      - let x =  2 / 0;
        let y = -2 / 0;
    - Infinity is a number: typeof Infinity returns number.
  - Hexadecimal:
    - JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.
      - let x = 0xFF;
  
  - NOTE:
    - Never write a number with a leading zero (like 07).
      Some JavaScript versions interpret numbers as octal if they are written with a leading zero.
    - By default, JavaScript displays numbers as base 10 decimals.
      But you can use the toString() method to output numbers from base 2 to base 36.
      Hexadecimal is base 16. Decimal is base 10. Octal is base 8. Binary is base 2.
        - let myNumber = 32;
          myNumber.toString(32);
          myNumber.toString(16);
          myNumber.toString(12);
          myNumber.toString(10);
          myNumber.toString(8);
          myNumber.toString(2);
    - Comparing two JavaScript objects always returns false.!

JavaScript BigInt:
  - JavaScript BigInt variables are used to store big integer values that are too big to be represented by a normal JavaScript Number.
  - JavaScript Integer Accuracy:
    - JavaScript integers are only accurate up to 15 digits:
      - Integer Precision
        let x = 999999999999999;
        let y = 9999999999999999;
  - How to Create a BigInt:
    - To create a BigInt, append n to the end of an integer or call BigInt():
      - let y = 9999999999999999n;
      - let y = BigInt(1234567890123456789012345)
    - BigInt is the second numeric data type in JavaScript (after Number).
    - With BigInt the total number of supported data types in JavaScript is 8:
      - 1. String
        2. Number
        3. Bigint
        4. Boolean
        5. Undefined
        6. Null
        7. Symbol
        8. Object

    - Operators that can be used on a JavaScript Number can also be used on a BigInt.
    - NOTE:
      - Arithmetic between a BigInt and a Number is not allowed (type conversion lose information).
      - Unsigned right shift (>>>) can not be done on a BigInt (it does not have a fixed width).
      - A BigInt can not have decimals.
    
    - BigInt can also be written in hexadecimal, octal, or binary notation:
      - let hex = 0x20000000000003n;
        let oct = 0o400000000000000003n
        let bin = 0b100000000000000000000000000000000000000000000000000011n;

    - Precision Curiosity
        - Rounding can compromise program security:
          - MAX_SAFE_INTEGER Example:
            - 9007199254740992 === 9007199254740993; // is true !!!

JavaScript Number Methods:
  - These number methods can be used on all JavaScript numbers:
    - toString()	Returns a number as a string
      toExponential()	Returns a number written in exponential notation
      toFixed()	Returns a number written with a number of decimals:
        - toFixed(2) is perfect for working with money.
      toPrecision()	Returns a number written with a specified length
      ValueOf()	Returns a number as a number

  - Converting Variables to Numbers:
    - There are 3 JavaScript methods that can be used to convert a variable to a number:
      - Number()	Returns a number converted from its argument.
        parseFloat()	Parses its argument and returns a floating point number
        parseInt()	Parses its argument and returns a whole number:
          - Stringdagi 1 numberni aniqlaydi
  
  - Number Object Methods:
    - These object methods belong to the Number object:
      - Number.isInteger()	Returns true if the argument is an integer
        Number.isSafeInteger()	Returns true if the argument is a safe integer
        Number.parseFloat()	Converts a string to a number
        Number.parseInt()	Converts a string to a whole numbe


JavaScript Number Properties:
  - EPSILON	The difference between 1 and the smallest number > 1.
    MAX_VALUE	The largest number possible in JavaScript
    MIN_VALUE	The smallest number possible in JavaScript
    MAX_SAFE_INTEGER	The maximum safe integer (253 - 1)
    MIN_SAFE_INTEGER	The minimum safe integer -(253 - 1)
    POSITIVE_INFINITY	Infinity (returned on overflow):
      - POSITIVE_INFINITY is returned on overflow.
    NEGATIVE_INFINITY	Negative infinity (returned on overflow)
    NaN	A "Not-a-Number" value:
      - NaN is a JavaScript reserved word for a number that is not a legal number.

  - Number Properties Cannot be Used on Variables:
    - Number properties belong to the JavaScript Number Object.
      These properties can only be accessed as Number.MAX_VALUE.
      Using x.MAX_VALUE, where x is a variable or a value, will return undefined:

JavaScript Arrays:
  - It is a common practice to declare arrays with the const keyword.
  - Using the JavaScript Keyword new also create array.
    - There is no need to use new Array().For simplicity,
     readability and execution speed, use the array literal method.
  - Arrays are a special type of objects. The typeof operator in JavaScript returns "object" for arrays.
    - JavaScript variables can be objects. Arrays are special kinds of objects.
      Because of this, you can have variables of different types in the same Array.
      You can have objects in an Array. You can have functions in an Array. You can have arrays in an Array.
  - The easiest way to add a new element to an array is using the push() method:
  - New element can also be added to an array using the length property.
  - NOTE: 
    - Adding elements with high indexes can create undefined "holes" in an array.
  - Associative Arrays:
    - Many programming languages support arrays with named indexes.
      Arrays with named indexes are called associative arrays (or hashes).
      JavaScript does not support arrays with named indexes.
      In JavaScript, arrays always use numbered indexes.
    - NOTE:
      - If you use named indexes, JavaScript will redefine the array to an object.
        After that, some array methods and properties will produce incorrect results.
      - JavaScript new Array():
        - JavaScript has a built-in array constructor new Array().
          But you can safely use [] instead.
            const points = new Array();
            const points = [];
          The new keyword can produce some unexpected results.
      - A Common Error:
        - const points = [40];
          is not the same as:
          const points = new Array(40);
  - The Difference Between Arrays and Objects:
    - In JavaScript, arrays use numbered indexes.
    - In JavaScript, objects use named indexes.
    - Arrays are a special kind of objects, with numbered indexes.
    - JavaScript does not support associative arrays.
      - You should use objects when you want the element names to be strings (text).
      - You should use arrays when you want the element names to be numbers.
  - How to Recognize an Array:
    - A common question is: How do I know if a variable is an array?
      The problem is that the JavaScript operator typeof returns "object":
    - Array.isArray():
      To solve this problem ECMAScript 5 (JavaScript 2009) defined a new method Array.isArray()
    - To solve this problem ECMAScript 5 (JavaScript 2009) defined a new method Array.isArray():
      const fruits = ["Banana", "Orange", "Apple"];
      fruits instanceof Array;

--------------------JAVASCRIPT Array MEthods-----------------------------
Array Methods:
  - length property returns the length (size) of an array.
  - toString() converts an array to a string of (comma separated) array values.
  - join() method also joins all array elements into a string.
  - Popping and Pushing:
    - Popping items out of an array, or pushing items into an array.
    - pop() method removes the last element from an array.
    - push() method adds a new element to an array (at the end).
  - shift() method removes the first array element and "shifts" all other elements to a lower index.
    shift() method returns the value that was "shifted out".
  - unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements.
    unshift() method returns the new array length.
  - NOTE:
    - Array elements can be deleted using the JavaScript operator delete.
      delete leaves undefined holes in the array.
      Use pop() or shift() instead.
    - JavaScript automatically converts an array to a comma separated string when a primitive value is expected.
    - Finding Max and Min Values in an Array:
      - There are no built-in functions for finding the highest or lowest value in a JavaScript array.
      
  - concat() method creates a new array by merging (concatenating) existing arrays
    concat() method does not change the existing arrays. It always returns a new array.
    concat() method can take any number of array arguments.
    concat() method can also take strings as arguments.
  - Flattening an Array:
    - Flattening an array is the process of reducing the dimensionality of an array.
      The flat() method creates a new array with sub-array elements concatenated to a specified depth.
  - splice() method adds new items to an array:
    - The first parameter (2) defines the position where new elements should be added (spliced in).
      The second parameter (0) defines how many elements should be removed.
      splice() method returns an array with the deleted items.
      With clever parameter setting, you can use splice() to remove elements without leaving "holes" in the array.

  - slice() method slices out a piece of an array.
    slice() method creates a new array.
    slice() method does not remove any elements from the source array.
  
--------------------------------JavaScript Sorting Arrays----------------------------------
- Sorting an Array:
  - sort() method sorts an array alphabetically:
    - sort() function sorts values as strings.
      However, if numbers are sorted as strings, "25" is bigger than "100", because "2" is bigger than "1".
      Because of this, the sort() method will produce incorrect result when sorting numbers.
      You can fix this by providing a compare function:
        - const points = [40, 100, 1, 5, 25, 10];
          points.sort(function(a, b){return a - b});
  - reverse() method reverses the elements in an array.
  - Sorting a whole array is a very inefficient method if you only want to find the highest (or lowest) value.
  - Math.max.apply to find the highest number in an array:
    - code:
      function myArrayMax(arr) {
        return Math.max.apply(null, arr);
      }
    
----------------------JavaScript Array Const------------------------
Arrays are Not Constants:
  - The keyword const is a little misleading.
    It does NOT define a constant array. It defines a constant reference to an array.
    Because of this, we can still change the elements of a constant array.
  - Elements Can be Reassigned:
    - Code:
      const cars = ["Saab", "Volvo", "BMW"];

      // You can change an element:
      cars[0] = "Toyota";
  - Assigned when Declared:
    JavaScript const variables must be assigned a value when they are declared.
    Meaning: An array declared with const must be initialized when it is declared.
    Using const without initializing the array is a syntax error:
    - Code: 
      const cars;
      cars = ["Saab", "Volvo", "BMW"]; //Not work!

An array declared with var does not have block scope.
Redeclaring Arrays:
  - Redeclaring an array declared with var is allowed anywhere in a program.
  - Redeclaring or reassigning an array to const, in the same scope, or in the same block, is not allowed:
  - Redeclaring an array with const, in another scope, or in another block, is allowed:

----------------------JavaScript Date Objects----------------------------------
NOTE:
  - Date objects are static. The "clock" is not "running".
    The computer clock is ticking, date objects are not.
  - JavaScript counts months from 0 to 11:
      January = 0.
      December = 11.
    
JavaScript Date Output:
  - By default, JavaScript will use the browser's time zone and display a date as a full text string.
Creating Date Objects:
  - Date objects are created with the new Date() constructor.
    There are 9 ways to create a new date object:
    new Date()
    new Date(date string)
    new Date(year,month)
    new Date(year,month,day)
    new Date(year,month,day,hours)
    new Date(year,month,day,hours,minutes)
    new Date(year,month,day,hours,minutes,seconds) 
    new Date(year,month,day,hours,minutes,seconds,ms)
    new Date(milliseconds)

  - new Date() creates a date object with the current date and time:
  - new Date(date string) creates a date object from a date string:
  - new Date(year, month, ...) creates a date object with a specified date and time.
  - You cannot omit month. If you supply only one parameter it will be treated as milliseconds.
Previous Century:
  - One and two digit years will be interpreted as 19xx:
      - const d = new Date(99, 11, 24);

new Date(milliseconds):
  - new Date(milliseconds) creates a new date object as milliseconds plus zero time:
  - NOTE:
  |   - JavaScript stores dates as number of milliseconds since January 01, 1970.

Displaying Dates:
  - toDateString() method converts a date to a more readable format:
  - toUTCString() method converts a date to a string using the UTC standard:
  - toISOString() method converts a date to a string using the ISO standard:

----------------------------JavaScript Date Input----------------------------------
There are generally 3 types of JavaScript date input formats:
  - ISO Date	"2015-03-25" (The International Standard)
    Short Date	"03/25/2015"
    Long Date	"Mar 25 2015" or "25 Mar 2015"

JavaScript ISO Dates:
  - ISO 8601 is the international standard for the representation of dates and times.
    The ISO 8601 syntax (YYYY-MM-DD) is also the preferred JavaScript date format.
  - ISO dates can be written without specifying the day (YYYY-MM):
  - ISO dates can be written without month and day (YYYY):
  - ISO dates can be written with added hours, minutes, and seconds (YYYY-MM-DDTHH:MM:SSZ):
      - Date and time is separated with a capital T.
        UTC time is defined with a capital letter Z.
        If you want to modify the time relative to UTC, remove the Z and add +HH:MM or -HH:MM instead:

-------------------JavaScript Set Date Methods-----------------------------------------
Set Date Methods:
  - setDate()	Set the day as a number (1-31)
    setFullYear()	Set the year (optionally month and day)
    setHours()	Set the hour (0-23)
    setMilliseconds()	Set the milliseconds (0-999)
    setMinutes()	Set the minutes (0-59)
    setMonth()	Set the month (0-11)
    setSeconds()	Set the seconds (0-59)
    setTime()	Set the time (milliseconds since January 1, 1970)

------------------JavaScript Math Object---------------------------------------------
Math Properties (Constants):
  - Math.E        // returns Euler's number
    Math.PI       // returns PI
    Math.SQRT2    // returns the square root of 2
    Math.SQRT1_2  // returns the square root of 1/2
    Math.LN2      // returns the natural logarithm of 2
    Math.LN10     // returns the natural logarithm of 10
    Math.LOG2E    // returns base 2 logarithm of E
    Math.LOG10E   // returns base 10 logarithm of E
Math Methods: 
  - Math.round(x)	Returns x rounded to its nearest integer
    Math.ceil(x)	Returns x rounded up to its nearest integer 
    Math.floor(x)	Returns x rounded down to its nearest integer
    Math.trunc(x)	Returns the integer part of x (new in ES6)
    Math.pow(x, y) returns the value of x to the power of y:
    Math.sqrt(x) returns the square root of x:
    Math.log(x) returns the natural logarithm of x.
    Math.log2(x) returns the base 2 logarithm of x.
    Math.log10(x) returns the base 10 logarithm of x.
    abs(x)	Returns the absolute value of x
    acos(x)	Returns the arccosine of x, in radians
    acosh(x)	Returns the hyperbolic arccosine of x
    asin(x)	Returns the arcsine of x, in radians
    asinh(x)	Returns the hyperbolic arcsine of x
    atan(x)	Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
    atan2(y, x)	Returns the arctangent of the quotient of its arguments
    atanh(x)	Returns the hyperbolic arctangent of x
    cbrt(x)	Returns the cubic root of x
    ceil(x)	Returns x, rounded upwards to the nearest integer
    cos(x)	Returns the cosine of x (x is in radians)
    cosh(x)	Returns the hyperbolic cosine of x
    exp(x)	Returns the value of Ex
    floor(x)	Returns x, rounded downwards to the nearest integer
    log(x)	Returns the natural logarithm (base E) of x
    max(x, y, z, ..., n)	Returns the number with the highest value
    min(x, y, z, ..., n)	Returns the number with the lowest value
    pow(x, y)	Returns the value of x to the power of y
    random()	Returns a random number between 0 and 1
    round(x)	Rounds x to the nearest integer
    sign(x)	Returns if x is negative, null or positive (-1, 0, 1)
    sin(x)	Returns the sine of x (x is in radians)
    sinh(x)	Returns the hyperbolic sine of x
    sqrt(x)	Returns the square root of x
    tan(x)	Returns the tangent of an angle
    tanh(x)	Returns the hyperbolic tangent of a number
    trunc(x)	Returns the integer part of a number (x)
    Math.random() returns a random number between 0 (inclusive),  and 1 (exclusive):
      - Math.random() returns a random number between 0 (inclusive),  and 1 (exclusive):

-----------------------JavaScript Booleans-------------------------------
Boolean Values:
  - Boolean() function to find out if an expression (or a variable) is true:
  - Everything With a "Value" is True:
      - Boolean(100)
        Boolean(3.14)
        Boolean(-15)
  - Comparing two JavaScript objects always return false.

---------------------JavaScript Comparison and Logical Operators------------
Comparison and Logical operators are used to test for true or false.
Comparison Operators:
  ==	equal to
  ===	equal value and equal type
  !=	not equal
  !==	not equal value or not equal type
  >	greater than
  <	less than	
  >=	greater than or equal to
  <=	less than or equal to

Logical Operators:
  &&	and	(x < 10 && y > 1) is true	
  ||	or	(x == 5 || y == 5) is false	
  !	not	!(x == y) is true

Conditional (Ternary) Operator:
  - Syntax:
      - variablename = (condition) ? value1:value2 
      - let voteable = (age < 18) ? "Too young":"Old enough";
The Nullish Coalescing Operator (??):
  - The ?? operator returns the first argument if it is not nullish (null or undefined).
    Otherwise it returns the second argument:
    let name = null;
    let text = "missing";
    let result = name ?? text;

The Optional Chaining Operator (?.):
The ?. operator returns undefined if an object is undefined or null (instead of throwing an error).
  - // Create an object:
    const car = {type:"Fiat", model:"500", color:"white"};
    // Ask for car name:
    document.getElementById("demo").innerHTML = car?.name;

--------------------JavaScript if, else, and else if--------------------
In JavaScript we have the following conditional statements:
  - Use if to specify a block of code to be executed, if a specified condition is true
    Use else to specify a block of code to be executed, if the same condition is false
    Use else if to specify a new condition to test, if the first condition is false
    Use switch to specify many alternative blocks of code to be executed
